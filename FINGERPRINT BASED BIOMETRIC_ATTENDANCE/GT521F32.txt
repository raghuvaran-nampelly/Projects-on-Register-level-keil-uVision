/**************************************************************************************
* File : FP_gt521f32.c
* Description : This file contains the function definitions related to GT521F32 
                Fingerprint Sensor commands
***************************************************************************************/

#include "stm32f401rbt6.h"
#include "UART1.h"
#include "FP_gt521f32.h"
#include "km_lcd.h"
#include "stdio.h"
#include "systemticktimer.h"



unsigned char FP_Buffer[12];
unsigned char packet[12];  
unsigned short error_code;
int FP_value;
extern int touch_flag;
char buffer[15];       //Buffer to store the converted integer as a string



void Touch_IC_Config(void)
{
	RCC_AHB1ENR |= (0x01 << 0);          //Set 0th bit of RCC_AHB1ENR to Enable Port A clock
	RCC_APB2ENR |= (0x01 << 14);         //set 14th bit of RCC_APB2ENR to Enable SYSCFG clock
		
	GPIOA_MODER &= ~(0x03 << (6*2));     //clear 13-12 bits of GPIOA_MODER (by default it is in input mode only)
	GPIOA_PUPDR &= ~(0x03 << (6*2));     //clear 13-12 bits of GPIOA_PUPDR
	GPIOA_PUPDR |=  (0x02 << (6*2));     //load "10" into 13-12 bit fields in GPIOA_PUPDR to make PC0 as pull-down
	
	SYSCFG_EXTICR2 &= 0xFFFFF0FF;       //configure PA6 as external interrupt using SYSCFG_EXTICR2
	EXTI_RTSR |= (0x01 << 6);           //Enable Rising Edge Trigger
	EXTI_FTSR |= (0x01 << 6);           //Enable Falling Edge Trigger
	EXTI_IMR  |= (0x01 << 6);
  NVIC_ISER0 |= (0x01 << 23);         //set 23rd bit in NVIC_ISTR0 to enable NVIC 23rd interrupt line

}



void Fingerprint_Response(unsigned int Timeout_Value)
{
	int i;
	int received_data; 
			
	for(i=0;i<12;i++)
	{
		received_data = UART1_InChar_TIMEOUT(Timeout_Value);
		if(received_data == TIMEOUT)
		{
			return;			
		}
		FP_Buffer[i] = (unsigned char)received_data;
	}
}




void PreparePacket(unsigned char packet[],unsigned char command,unsigned char parameter)
{	
	int i;
	unsigned short int checksum=0;

	//Start Header (Fixed)
  packet[0] = 0x55;  
  packet[1] = 0xAA;  

  //Device ID (Default:0x0001)
  packet[2] = 0x01;  
  packet[3] = 0x00;  

  //Parameters
	packet[4] = (parameter & 0xFF);           //lower byte of parameter 
  packet[5] = ((parameter >> 8) & 0xFF);    //higher byte of parameter
  packet[6] = 0x00;  
  packet[7] = 0x00;  
  	
  //Command Byte
  packet[8] = command;  
  packet[9] = 0x00;  
 
  //Checksum (Sum of bytes except header)
	for (i = 0; i <= 9; i++)
  {
		checksum += packet[i];
  }
  packet[10] = (checksum & 0xFF);              //lower byte of checksum 
  packet[11] = ((checksum >> 8) & 0xFF);       //higher byte of checksum
	
}



void SendCommand(unsigned char command, unsigned short parameter,unsigned int Timeout_Value)
{
  PreparePacket(packet, command, parameter);  //Prepare the packet
  UART1_OutStr(packet, 12);                   //Send the packet via UART
	Fingerprint_Response(Timeout_Value);        //Read 12-byte response into FP_Buffer[]
}



int GetErrorCode(void)
{
	int error = (FP_Buffer[5] << 8) | FP_Buffer[4];  //Extract the 2-byte error code from positions 4 and 5
	return error;
}



int IsFingerPlaced(void)
{
	SendCommand(ISPRESSFINGER, 0, 250000);     //Send command to check if the finger is present

  error_code = GetErrorCode();               //Get the error code

  //Handle errors first
  switch (error_code)
  {
		case NACK_COMM_ERR:
			return NACK_COMM_ERR;         //Communication error

    case NACK_DEV_ERR:
			return NACK_DEV_ERR;          //Device error

    case NACK_FINGER_IS_NOT_PRESSED:
			return NACK_FINGER_IS_NOT_PRESSED;   //No finger pressed

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;                 //Timeout error

    default:
			return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_NO_FINGER;    //If no error, check for finger presence
  }
}




int GetEnrollCount(void)
{
	SendCommand(GETENROLLCOUNT, 0, 100000);     //Send the GetEnrollCount command

  error_code = GetErrorCode();                //Get the error code

  //Check for specific error messages
  switch (error_code)
  {
		case NACK_TIMEOUT:
			return NACK_TIMEOUT;                    //Timeout occurred

    case NACK_DB_IS_EMPTY:
			return NACK_DB_IS_EMPTY;                //No fingerprints are enrolled

    case NACK_COMM_ERR:
			return NACK_COMM_ERR;                   //Communication error

    default:
			return ((FP_Buffer[5] << 8) | FP_Buffer[4]);    //If no error, extract enroll count
  }
}




int CheckEnrolled(unsigned short int ID)
{
	SendCommand(CHECKENROLLED, ID, 100000);     //Send CheckEnrolled command
	
	error_code = GetErrorCode();               //Get the error code
	
  //Handle specific errors
	switch (error_code)
  {
		case NACK_IS_NOT_USED:
			return NACK_IS_NOT_USED;          //ID is not used (not enrolled)

    case NACK_IS_ALREADY_USED:
			return NACK_IS_ALREADY_USED;      //ID is already enrolled

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;              //Timeout error

    default:
			//If no error, check for success response
      return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_TIMEOUT;
  }
}




int CaptureFinger(void)
{
	SendCommand(CAPTUREFINGER, 0, 500000);   //Send CaptureFinger command with a timeout          

  error_code = GetErrorCode();            //Get the error code

  //Handle specific error cases
  switch (error_code)
  {
		case NACK_BAD_FINGER:
			return NACK_BAD_FINGER;             //Poor fingerprint quality
		
		case NACK_FINGER_IS_NOT_PRESSED:
			return NACK_FINGER_IS_NOT_PRESSED;  //No finger detected

    case NACK_COMM_ERR:
      return NACK_COMM_ERR;              //Communication error

    case NACK_DEV_ERR:
      return NACK_DEV_ERR;               //Device error

    case NACK_TIMEOUT:
      return NACK_TIMEOUT;              //Timeout error

    default:
			 //If no error, check for success response
       return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_CAPTURE_FAIL;  
    }
}



int EnrollStart(unsigned short int ID)
{
	SendCommand(ENROLLSTART, ID, 100000);        //Send EnrollStart command

  error_code = GetErrorCode();                 //Get the error code
	
	//Handle specific errors
  switch (error_code)
  {
		case NACK_IS_ALREADY_USED:
			return NACK_IS_ALREADY_USED;     //ID is already in use

    case NACK_INVALID_POS:
			return NACK_INVALID_POS;        //Invalid ID position (out of range)

    case NACK_DB_IS_FULL:
			return NACK_DB_IS_FULL;        //Database is full

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;           //Timeout error

    default:
			//If no error, check for success response
      return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_ENROLLMENT_FAIL;
  }
}




int Enroll1(void)
{
	SendCommand(ENROLL1, 0, 700000);             //Send Enroll1 command with a timeout

  //Get the error code
	error_code = GetErrorCode();
	
  //Handle specific error cases
  switch (error_code)
  {
		case NACK_BAD_FINGER:
			return NACK_BAD_FINGER;         //Poor fingerprint quality

    case NACK_ENROLL_FAILED:
			return NACK_ENROLL_FAILED;      //Enrollment processing error

    case NACK_TURN_ERR:
			return NACK_TURN_ERR;           //Incorrect enrollment sequence

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;           //Timeout error

    default:
			//If no error, check for success response
			return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_ENROLLMENT_FAIL;  
  }
}




int Enroll2(void)
{
	SendCommand(ENROLL2, 0, 700000);             //Send Enroll1 command with a timeout

  //Get the error code
	error_code = GetErrorCode();
	
  //Handle specific error cases
  switch (error_code)
  {
		case NACK_BAD_FINGER:
			return NACK_BAD_FINGER;         //Poor fingerprint quality

    case NACK_ENROLL_FAILED:
			return NACK_ENROLL_FAILED;      //Enrollment processing error

    case NACK_TURN_ERR:
			return NACK_TURN_ERR;           //Incorrect enrollment sequence

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;           //Timeout error

    default:
			//If no error, check for success response
			return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_ENROLLMENT_FAIL;  
  }
}



int Enroll3(void)
{
	SendCommand(ENROLL3, 0, 700000);             //Send Enroll1 command with a timeout

  //Get the error code
	error_code = GetErrorCode();
	
  //Handle specific error cases
  switch(error_code)
  {
		case NACK_BAD_FINGER:
			return NACK_BAD_FINGER;         //Poor fingerprint quality

    case NACK_ENROLL_FAILED:
			return NACK_ENROLL_FAILED;      //Enrollment processing error

    case NACK_TURN_ERR:
			return NACK_TURN_ERR;           //Incorrect enrollment sequence

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;           //Timeout error

    default:
			//If no error, check for success response
			return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_ENROLLMENT_FAIL;  
  }
}




void EnrollFingerprint(void)
{
	int step=0;
  int enroll_status =0;
  int enroll_start_status=0;
	volatile int ID=0;
	
  ID = GetEnrollCount();  //Get the next available ID
	
  if(ID < 0)  
  {
		switch(ID)
    {
			case NACK_TIMEOUT:	
				KM_LCD_Write_Cmd(0x01);
				KM_LCD_Write_Str((unsigned char *)"ERROR: TIMEOUT  IN ID FETCH");
        break;
			
      case NACK_DB_IS_EMPTY:
				KM_LCD_Write_Cmd(0x01);
				KM_LCD_Write_Str((unsigned char *)"ERROR: NO FINGERPRINTS IN DB");
        break;
			
      case NACK_COMM_ERR:
				KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ERROR: COMMUNICATION FAILURE");
        break;
			
      default:
				KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ERROR: UNKNOWN ID ISSUE");
    }
    return;
  }
	
	KM_Delay_ms(3000);

	
  //Start Enrollment Process
  enroll_start_status = EnrollStart(ID);
	
  if(enroll_start_status != SUCCESS)
  {
		switch(enroll_start_status)
    {
			case NACK_IS_ALREADY_USED:
				KM_LCD_Write_Cmd(0x01);
				KM_LCD_Write_Str((unsigned char *)"ERROR: ID ALREADY USED");
        break;
		
			case NACK_COMM_ERR:
				KM_LCD_Write_Cmd(0x01);
				KM_LCD_Write_Str((unsigned char *)"ERROR: COMMUNICATION ISSUE");
        break;
			
      case NACK_DEV_ERR:
				KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ERROR: DEVICE ISSUE");
        break;
			
      case NACK_TIMEOUT:
				KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ERROR: TIMEOUT  IN ENROLLSTART");
        break;
			
      default:
				KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ERROR: ENROLLSTART FAILED");
    }
    return;
  }
	KM_LCD_Write_Cmd(0x01);
  KM_LCD_Write_Str((unsigned char *)"ENROLLMENT STARTED");
	
	
	//Capture and enroll fingerprints sequentially
  for(step=1;step <= 3;step++)
  {
		sprintf(buffer,"PLACE FINGER %d",(step));
		KM_LCD_Write_Cmd(0x01);
		KM_LCD_Write_Str((unsigned char *)buffer);
		
		if(step!=1)
		{
			KM_LCD_Write_Cmd(0xC0);
			KM_LCD_Write_Str((unsigned char *)"[SAME AS BEFORE]");
		}

    //Wait until both touch_flag == 1 (button pressed) and IsFingerPlaced() is successful
    while(!(touch_flag == 1 && IsFingerPlaced() == SUCCESS))
    {
      ;
    }

    if(CaptureFinger() != SUCCESS)
    {
			KM_LCD_Write_Cmd(0x01);
			KM_LCD_Write_Str((unsigned char *)" ERROR: FINGER  CAPTURE FAILED");
      return;
    }

        
    switch(step)
    {
			case 1:
				enroll_status = Enroll1();
			  KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ENROLL1 SUCCESS");
			  KM_Delay_ms(1000);
			  break;
			
      case 2:
        enroll_status = Enroll2();
			  KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ENROLL2 SUCCESS");
			  KM_Delay_ms(1000);
        break;
			
      case 3:
        enroll_status = Enroll3();
			  KM_LCD_Write_Cmd(0x01);
        KM_LCD_Write_Str((unsigned char *)"ENROLL3 SUCCESS");
			  KM_Delay_ms(1000);
        break;
    }

    if(enroll_status != SUCCESS)
    {
			switch (enroll_status)
      {
				case NACK_BAD_FINGER:
					KM_LCD_Write_Cmd(0x01);
					KM_LCD_Write_Str((unsigned char *)"ERROR: POOR FINGERPRINT QUALITY");
          break;
				
        case NACK_ENROLL_FAILED:
					KM_LCD_Write_Cmd(0x01);
          KM_LCD_Write_Str((unsigned char *)"ERROR: ENROLLMENT FAILED");
          break;
				
        case NACK_TURN_ERR:
					KM_LCD_Write_Cmd(0x01);
          KM_LCD_Write_Str((unsigned char *)"ERROR: WRONG SEQUENCE");
          break;
				
        case NACK_TIMEOUT:
					KM_LCD_Write_Cmd(0x01);
          KM_LCD_Write_Str((unsigned char *)"ERROR: TIMEOUT IN ENROLLMENT");
          break;
				
        default:
					KM_LCD_Write_Cmd(0x01);
          KM_LCD_Write_Str((unsigned char *)"ERROR: UNKNOWN ENROLLMENT ISSUE");
      }
      return;
    }

		KM_LCD_Write_Cmd(0x01);
    KM_LCD_Write_Str((unsigned char *)"REMOVE FINGER");
		
    //Wait for button release (touch_flag == 0) (which also results in finger removal)
    while(touch_flag == 1);
  }

	KM_LCD_Write_Cmd(0x01);
  KM_LCD_Write_Str((unsigned char *)"ENROLLMENT SUCCESSFUL!");
	KM_Delay_ms(1000);
}




int IdentifyFingerprint(void)
{
	SendCommand(IDENTIFY, 0, 1300000);   //Send Identify command with timeout
	
	error_code = GetErrorCode();        //Get the error code

  switch(error_code)
  {
		case NACK_DB_IS_EMPTY:
			return NACK_DB_IS_EMPTY;       //Database is Empty
		
		case NACK_IDENTIFY_FAILED:
			return NACK_IDENTIFY_FAILED;    //No match found

    case NACK_COMM_ERR:
			return NACK_COMM_ERR;           //Communication error

    case NACK_DEV_ERR:
			return NACK_DEV_ERR;           //Device error

    case NACK_TIMEOUT:
			return NACK_TIMEOUT;           //Timeout error

    default:
			//Check for success response
      return (FP_Buffer[8] == 0x30) ? ((FP_Buffer[5] << 8) | FP_Buffer[4]) : ERROR_IDENTIFICATION_FAIL;  
  }
}



void IdentifyFingerprint_LCD(void)
{
	int result=0;
	char buffer[20];

	KM_LCD_Write_Cmd(0x01);
	KM_LCD_Write_Str((unsigned char *)"IDENTIFICATION  [1:N]");
	
  while(!(touch_flag == 1 && IsFingerPlaced() == SUCCESS)){;}

  if(CaptureFinger() != SUCCESS)
  {
		KM_LCD_Write_Cmd(0x01);
	  KM_LCD_Write_Str((unsigned char *)" ERROR: FINGER  CAPTURE FAILED");
    return;
  }	
	
	//KM_Delay_ms(1000);
	
  result = IdentifyFingerprint();  //Call IdentifyFingerprint()

  KM_LCD_Write_Cmd(0x01);         //Clear LCD before displaying new message

  switch (result)
  {
		case NACK_DB_IS_EMPTY:
			KM_LCD_Write_Str((unsigned char *)"ERROR: DB IS EMPTY");
      break;

    case NACK_IDENTIFY_FAILED:
			KM_LCD_Write_Str((unsigned char *)"ERROR: NO MATCH");
      break;

    case NACK_COMM_ERR:
			KM_LCD_Write_Str((unsigned char *)"ERROR: COMM FAILURE");
      break;

    case NACK_DEV_ERR:
			KM_LCD_Write_Cmd(0x01);
			KM_LCD_Write_Str((unsigned char *)"ERROR: SENSOR FAILURE");
      break;

    case NACK_TIMEOUT:
			KM_LCD_Write_Str((unsigned char *)"ERROR: TIMEOUT");
      break;

    default:
			if(result >= 0)     //If a valid ID is received
      {
				sprintf(buffer, "ID MATCH: %04X", result);
        KM_LCD_Write_Str((unsigned char *)buffer);
      }
      else
      {
				KM_LCD_Write_Str((unsigned char *)"IDENTIFICATION  FAILED");
      }
      break;
    }

    KM_Delay_ms(2000);  //Delay 
}



int VerifyFingerprint(int ID)
{
	SendCommand(VERIFY, ID, 1000000);  //Send Verify command with timeout

  error_code = GetErrorCode();       //Get the error code

  switch(error_code)
  {
		case NACK_DB_IS_EMPTY:
			return NACK_DB_IS_EMPTY;       //Database is Empty
		
		case NACK_VERIFY_FAILED:
			return NACK_VERIFY_FAILED;   //No match for the given ID

    case NACK_COMM_ERR:
      return NACK_COMM_ERR;       //Communication error

    case NACK_DEV_ERR:
      return NACK_DEV_ERR;        //Device error

    case NACK_TIMEOUT:
      return NACK_TIMEOUT;        //Timeout error

    default:
			//Check for success response
      return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_VERIFICATION_FAIL;  
  }
}


void VerifyFingerprint_LCD(int ID)
{
	int result=0;
  char buffer[20];
	
	KM_LCD_Write_Cmd(0x01);
	KM_LCD_Write_Str((unsigned char *)"VERIFICATION  [1:1]");
	
  while(!(touch_flag == 1 && IsFingerPlaced() == SUCCESS)){;}

  if(CaptureFinger() != SUCCESS)
  {
		KM_LCD_Write_Cmd(0x01);
	  KM_LCD_Write_Str((unsigned char *)" ERROR: FINGER   CAPTURE FAILED");
    return;
  }	
	
	result = VerifyFingerprint(ID);  //Call VerifyFingerprint() with ID

  KM_LCD_Write_Cmd(0x01);         //Clear LCD before displaying message

  switch (result)
  {
		case NACK_DB_IS_EMPTY:
			KM_LCD_Write_Str((unsigned char *)"ERROR: DB IS EMPTY");
      break;

    case NACK_VERIFY_FAILED:
      KM_LCD_Write_Str((unsigned char *)"ERROR: NO MATCH");
      break;

    case NACK_COMM_ERR:
      KM_LCD_Write_Str((unsigned char *)"ERROR: COMM FAILURE");
      break;

    case NACK_DEV_ERR:
      KM_LCD_Write_Str((unsigned char *)"ERROR: SENSOR FAILURE");
      break;

    case NACK_TIMEOUT:
      KM_LCD_Write_Str((unsigned char *)"ERROR: TIMEOUT");
      break;

    case SUCCESS:
		  sprintf(buffer, "ID MATCH: %d", result);
		  KM_LCD_Write_Cmd(0x80);
      KM_LCD_Write_Str((unsigned char *)buffer);
      KM_LCD_Write_Cmd(0xC0);		
      KM_LCD_Write_Str((unsigned char *)"VERIFY SUCCESS");
      break;

    default:
      KM_LCD_Write_Str((unsigned char *)"ERROR: VERIFY FAIL");
      break;
  }

  KM_Delay_ms(2000);  // Delay to allow message display
}



int DeleteAll(void)
{
	SendCommand(DELETEALL, 0, 100000);  // Send DELETE ALL command

  error_code = GetErrorCode();        //Get the error code

  switch(error_code)
  {
		case NACK_DB_IS_EMPTY:
			return NACK_DB_IS_EMPTY;       //No fingerprints in the database

    case NACK_COMM_ERR:
      return NACK_COMM_ERR;          //Communication failure

    case NACK_DEV_ERR:
      return NACK_DEV_ERR;           //Sensor hardware failure

    case NACK_TIMEOUT:
      return NACK_TIMEOUT;          //Timeout error

    default:
			//Check for success response
      return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_DELETE_ALL_FAIL;
    }
}



int DeleteID(int ID)
{
	SendCommand(DELETEALL, ID, 100000);  // Send DELETE ALL command

  error_code = GetErrorCode();        //Get the error code

  switch(error_code)
  {
		case NACK_DB_IS_EMPTY:
			return NACK_DB_IS_EMPTY;       //No fingerprints in the database

    case NACK_COMM_ERR:
      return NACK_COMM_ERR;          //Communication failure

    case NACK_DEV_ERR:
      return NACK_DEV_ERR;           //Sensor hardware failure

    case NACK_TIMEOUT:
      return NACK_TIMEOUT;          //Timeout error

    default:
			//Check for success response
      return (FP_Buffer[8] == 0x30) ? SUCCESS : ERROR_DELETE_ID_FAIL;
    }
}